# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SentinelUpscaling
                                 A QGIS plugin
 Esse plugin realiza downloads e upscaling de imagens do satelite Sentinel 2
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-04-12
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Guilherme Rodrigues Sganderla
        email                : grodriguessganderla@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon, QPixmap
from qgis.PyQt import QtGui
from qgis.PyQt.QtWidgets import QAction, QDockWidget, QMessageBox, QTableWidgetItem, QLabel, QTableView, QPushButton, QHBoxLayout
from qgis import processing
from qgis.core import QgsTask, QgsApplication
from qgis.utils import plugins

from .resources import *
from .sentinel_upscaling_dialog import SentinelUpscalingDialog
from .sentinel_upscaling_dialog_search import SentinelUpscalingDialogSearch
import os.path
from sentinelsat import SentinelAPI, read_geojson, geojson_to_wkt
import requests
import re

from zipfile import ZipFile
from io import BytesIO
        
def do_task(task, produto, api):

    dic = api.download(produto, os.path.dirname(__file__) + '/temp/')
    return dic

def verifica(nome):
    if "_10m" in nome and ("_B02" in nome or "_B03" in nome or "_B04" in nome or "_TCI_" in nome):
        return True
    return False

def stopped(self):
    QgsMessageLog.logMessage(
        'RandomTask "{name}" was canceled'.format(
            name=self.description()),
        MESSAGE_CATEGORY, Qgis.Info)
    super().cancel()

class SentinelUpscaling:

    def __init__(self, iface):
        
        self.iface = iface
        self.setgns = QSettings()
        self.plugin_dir = os.path.dirname(__file__)

        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SentinelUpscaling_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr(u'&Sentinel Upscaling')

        self.first_start = None

    def tr(self, message):

        return QCoreApplication.translate('SentinelUpscaling', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):

        icon_path = ':/plugins/sentinel_upscaling/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Download de Imagens Sentinel'),
            callback=self.run,
            parent=self.iface.mainWindow())

        self.first_start = True


    def unload(self):

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Sentinel Upscaling'),
                action)
            self.iface.removeToolBarIcon(action)


    def formaImage(self, bytes):

        labels = QLabel(self.dlg_search)
        labels.setText("")
        labels.setScaledContents(True)

        pixmap = QPixmap()
        pixmap.loadFromData(bytes, "jpg")
        
        labels.setPixmap(pixmap)
        
        return labels

    def busca(self):

        self.lista_down = []

        footprint = geojson_to_wkt(read_geojson(os.path.dirname(__file__) + "/map.geojson"))

        products = self.api.query(footprint,
                     date=(self.dlg_search.dataInicial.date().toString("yyyyMMdd"), self.dlg_search.dataFinal.date().toString("yyyyMMdd")),
                     platformname='Sentinel-2',
                     producttype='S2MSI2A',
                     cloudcoverpercentage=(0, 100))

        self.iid = 0
        self.dlg_search.tabela.clearContents()
        self.dlg_search.tabela.setRowCount(0)
        self.dlg_search.tabela.setSelectionBehavior(QTableView.SelectRows)

        for chave, valor in products.items():
            self.dlg_search.tabela.insertRow(self.iid)

            description = f"Titulo: {valor['title']}\nData: {valor['beginposition']}\n% de Nuvens: {valor['cloudcoverpercentage']}\nTamanho do Arquivo: {valor['size']}"
            
            byts = self.sessao.get(valor["link_icon"]).content
            img = self.formaImage(byts)
            self.dlg_search.tabela.setColumnWidth(0,366)
            self.dlg_search.tabela.setColumnWidth(1,70)
            self.dlg_search.tabela.setItem(self.iid, 0, QTableWidgetItem(description))
            self.dlg_search.tabela.setCellWidget(self.iid, 1, img)
            self.lista_down.append(chave)

            self.iid = self.iid + 1  

    def download(self):

        index = self.dlg_search.tabela.selectionModel().selectedRows()[0].row()
        self.down_alvo = self.lista_down[index]
    
        globals()['task2'] = QgsTask.fromFunction("Download da Imagem " + self.img_down, do_task,
                                 on_finished=self.completed, produto=self.down_alvo, api=self.api)

        QgsApplication.taskManager().addTask(globals()['task2'])
    
    def completed(self, exception, result=None):

        if result:
            base_img = []

            target_dir = os.path.dirname(__file__) + '/temp/' + result['title']

            with ZipFile(result['path']) as zip:
                for zip_info in zip.infolist():
                    if zip_info.filename.endswith("jp2") and verifica(zip_info.filename):              
                        zip_info.filename = os.path.basename(zip_info.filename).replace("_10m.jp2", ".jp2")
                        zip.extract(zip_info, target_dir)
                        base_img.append(zip_info.filename)

            if os.path.exists(result['path']):
                os.remove(result['path'])
            
            for img in base_img:
                if img.endswith("_TCI.jp2"):
                    img_target = target_dir + "/" + img
                    baseName = img[0:-8]
                    out_target = target_dir + "/" + baseName + ".tif"

            processing.run('gdal:warpreproject',
                        {'INPUT':img_target,
                        'RESAMPLING': 4,
                        'TARGET_RESOLUTION': 2.5000,
                        'MULTITHREADING': True,
                        'OUTPUT':out_target})

            self.iface.addRasterLayer(out_target, baseName)
        else:
            if exception is None:
                QgsMessageLog.logMessage(
                    'RandomTask "{name}" not successful but without '\
                    'exception (probably the task was manually '\
                    'canceled by the user)'.format(
                        name=description()),
                    MESSAGE_CATEGORY, Qgis.Warning)
            else:
                QgsMessageLog.logMessage(
                    'RandomTask "{name}" Exception: {exception}'.format(
                        name=description(),
                        exception=exception),
                    MESSAGE_CATEGORY, Qgis.Critical)
                raise exception

    def verifica_login(self):
        
        self.api = SentinelAPI(self.dlg.username.text(), self.dlg.password.text(), 'https://scihub.copernicus.eu/dhus')
        try:
            self.api.query()
            self.setgns.setValue("armazem/login", self.dlg.username.text())
            self.setgns.setValue("armazem/password", self.dlg.password.text())
            self.dlg.close()

            self.sessao = requests.Session()
            self.sessao.auth = (self.setgns.value("armazem/login"),self.setgns.value("armazem/password"))
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dlg_search)
            self.dlg_search.show()
        except:
            QMessageBox.warning(self.dlg, "Erro na Autenticação", "Entre novamente com os dados")

    def muda_botao(self):

        result = re.search('Titulo: (.*)\nData:', self.dlg_search.tabela.selectionModel().selectedRows()[0].data())

        novo_nome = "Download: " + result.group(1)

        self.img_down = result.group(1)

        self.dlg_search.downButton.setText(novo_nome)
        self.dlg_search.downButton.adjustSize()

    def run(self):

        if self.first_start == True:

            self.first_start = False
            self.dlg = SentinelUpscalingDialog()
            self.dlg_search = SentinelUpscalingDialogSearch()
            
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dlg)

            if self.setgns.value("armazem/login") and self.setgns.value("armazem/password"):
                self.dlg.username.setText(self.setgns.value("armazem/login"))
                self.dlg.password.setText(self.setgns.value("armazem/password"))

            self.dlg.loginButton.clicked.connect(self.verifica_login)
            self.dlg_search.buscarButton.clicked.connect(self.busca)
            self.dlg_search.downButton.clicked.connect(self.download)
            self.dlg_search.tabela.itemSelectionChanged.connect(self.muda_botao)

        self.dlg.show()
