# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SentinelUpscaling
                                 A QGIS plugin
 Esse plugin realiza downloads e upscaling de imagens do satelite Sentinel 2
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-04-12
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Guilherme Rodrigues Sganderla
        email                : grodriguessganderla@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon, QPixmap
from qgis.PyQt import QtGui
from qgis.PyQt.QtWidgets import QAction, QDockWidget, QMessageBox, QTableWidgetItem, QLabel, QTableView, QPushButton, QHBoxLayout
from qgis import processing
from qgis.core import QgsTask, QgsApplication
from qtrangeslider import QLabeledRangeSlider
from qgis.utils import plugins
from .resources import *
from .sentinel_upscaling_dialog import SentinelUpscalingDialog
from .sentinel_upscaling_dialog_search import SentinelUpscalingDialogSearch
import os.path
from sentinelsat import SentinelAPI, read_geojson, geojson_to_wkt
import requests
import re
from hurry.filesize import size
import shutil
import sys

import xml.etree.ElementTree as et

import time

# Css para estilizar a barra de intervalo de porcentagem nuvens
QSS = """
QSlider {
    min-height: 10px;
    max-height: 15px;
    max-width:370px;
    padding-bottom: 21px;
}
QSlider::groove:horizontal {
    border: 0px solid #000;
    background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #123, stop:1 #123);
    height: 15px;
    border-radius: 0px;
}
QSlider::handle {
    background: qradialgradient(cx:0, cy:0, radius: 1.2, fx:0.35,
                                fy:0.35, stop:0 #eef, stop:1 #eef);
    height: 10px;
    width: 10px;
    border-radius: 0px;
}
QRangeSlider {
    qproperty-barColor: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #cdf, stop:1 #cdf);
}
"""

# Carrega as coordenadas do poligono da região do rio
footprint = geojson_to_wkt(read_geojson(os.path.dirname(__file__) + "/map.geojson"))

def faz_upscaling(task, projeto):
    """ Realiza o upscaling da imagem passada por paramêtro

    Parameters
    ----------
    task: QgsTask
        É um paramêtro da classe QgsTask e é utilizado implicitamente pelo QGIS.
    projeto: dict(str, str, str)
        É um dicionário com todos os nomes dos arquivo, seja de entrada ou o nome base

    Returns
    -------
    dict
        Um dicionário com os nomes dos arquivos.
    """

    processing.run('gdal:warpreproject',
                        {'INPUT':projeto[2],
                        'RESAMPLING': 4,
                        'TARGET_RESOLUTION': 2.5000,
                        'MULTITHREADING': True,
                        'OPTIONS': 'COMPRESS=JPEG|JPEG_QUALITY=100|NUM_THREADS=ALL_CPUS',
                        'OUTPUT':projeto[0][:-4] + "_up.jpeg"})

    return projeto

def realiza_busca(task, produto, sess, tabela):
    """ Realiza as inserções das linhas da tabela de produtos achados

    Parameters
    ----------
    task: QgsTask
        É um paramêtro da classe QgsTask e é utilizado implicitamente pelo QGIS.
    produto: list(dict)
        É uma lista com todos os produtos encontrados, sendo cada produto um dicionário com todas as informações sobre ele.
    sess: request.Session
        É uma sessão iniciada contendo os headers e as credenciais para acesso ao Sentinel.
    tabela: QTableView
        É uma variavel referente ao widget da tabela de produtos

    Returns
    -------
    dict(list, list, list)
        É um dicionario contendo listas de: dos arquivos para download (url, nome, caminho para diretorio); o nome dos produtos; os bytes de cada imagem para o preview 
    """

    def busca_TCI(root):
        """ Busca dentro do xml passado, o nome do arquivo TCI

        Parameters
        ----------
        root: xml.etree.ElementTree.et 
            É o inicio do arquivo xml que passou pelo parse

        Returns
        -------
        str
            Uma string com o nome do arquivo TCI daquele produto.
        """
        for entry in root.iter('{http://www.w3.org/2005/Atom}entry'):
            for titles in entry.iter('{http://www.w3.org/2005/Atom}title'):
                # se o titulo do arquivo termina com TCI e é de 10m
                if titles.text.endswith('_TCI_10m.jp2'):
                    return titles.text

    # inicializa as listas que serão retornadas
    url_nome = []
    lista_down = []
    img = []
    iid = 0

    # para cada produto dentro da lista de produtos.
    for chave, valor in produto.items():

        # insere uma linha na tabela
        tabela.insertRow(iid)
        
        # adquire os bytes da imagem preview desse produto
        byts = sess.get(valor["link_icon"]).content
        img.append(byts)

        # é feito uma tentativa para conseguir achar o TCI usando o caminho padrão de URL, alguns dos produtos ainda usam esse caminho
        try:
            # forma a url do caminho padrão
            tci = valor['link'][:-6] + f"Nodes(\'{valor['title']}.SAFE\')/Nodes(\'GRANULE')/Nodes"
            res = sess.get(tci).content

            # realiza o parse do xml resultante
            root = et.fromstring(res)
            granule = root.find('./{http://www.w3.org/2005/Atom}entry/{http://www.w3.org/2005/Atom}title').text

            # alguns produtos possuem esse caminho
            try:
                tci = tci + f"(\'{granule}\')/Nodes(\'IMG_DATA\')/Nodes(\'R10m\')/Nodes"

                res = sess.get(tci).content
                root = et.fromstring(res)
            except:
                # outros não possuem aquele caminho
                tci = tci + f"(\'{granule}\')/Nodes(\'IMG_DATA\')/Nodes"
        except:
            # se o caminho original não funcionou, o caminho alternativo é utilizado
            tci = valor['link'][:-6] + f"Nodes(\'{valor['title']}.SAFE\')/Nodes"

        res = sess.get(tci).content
        root = et.fromstring(res)

        # busca o nome completo do arquivo TCI
        titulo = busca_TCI(root)
        
        # guarda os nomes de arquivo do produto atual
        tci = tci + f"('{titulo}')/$value"
        url_nome.append({'url': tci, 'path': os.path.dirname(__file__) + f"/temp/{valor['title']}", 'img': titulo}) 

        # busca o tamanho do arquivo do produto atual e cria a descrição da tabela 
        header = sess.head(tci).headers
        description = f"Titulo: {valor['title']}\nData: {valor['beginposition']}\n% de Nuvens: {valor['cloudcoverpercentage']}\nTamanho do Arquivo: {size(int(header['content-length']))}"

        # insere as colunas da nova linha
        tabela.setColumnWidth(0,366)
        tabela.setColumnWidth(1,70)
        tabela.setItem(iid, 0, QTableWidgetItem(description))
        lista_down.append(chave)
        
        iid = iid + 1 
    
    return url_nome, lista_down, img

def faz_download(task, produto, sess):
    """ Realiza o download do produto escolhido pelo o usuário

    Parameters
    ----------
    task: QgsTask
        É um paramêtro da classe QgsTask e é utilizado implicitamente pelo QGIS.
    produto: dict
        É um dicionário com todas as informações sobre o produto escolhido.
    sess: request.Session
        É uma sessão iniciada contendo os headers e as credenciais para acesso ao Sentinel.

    Returns
    -------
    dict
        É um dicionario contendo as informações do produto baixado.
    """

    # realiza o download da imagem
    resp = sess.get(produto['url'], stream=True)
        
    # verifica se o download foi concluido com sucesso
    if resp.status_code == 200:
        
        # se não existe o diretório com o nome desse produto, cria um
        if not os.path.exists(produto['path']):
            os.makedirs(produto['path'])

        # cria um arquivo novo e transfere todos os dados baixados nele
        with open(produto['path'] + f"/{produto['img']}", 'wb') as saida:
            shutil.copyfileobj(resp.raw, saida)

        return produto

    return NULL

class SentinelUpscaling:
    """ 
    Classe principal do plugin, sendo considerado o main do projeto

    Attributes
    ----------
    iface: QProject
        É a interface do QGIS com o codigo python.
    setgns: QSettings
        É responsável pela configuração do plugin.
    plugin_dir: str
        Contem o caminho completo do diretório.
    translator: QTranslator
        Variável do QGIS, utilizada implicitamente.
    actions: list
        Lista das ações de interação com o plugin.
    menu: QCoreApplication
        Referencia ao menu de plugins do QGIS, utilizado automaticamente pelo Plugin Builder.
    first_start: bool
        É uma variavel para indicar a primeira utilização do plugin, quando o usuário invoca o plugin.
    url_nome: dict
        É uma variavel para guardar as informações dos produtos buscados.
    lista_down: list
        É uma variavel com todos os nomes dos produtos buscados.
    dlg: SentinelUpscalingDialog
        É uma referencia a UI importada do plugin, ela contem todos os widgets e conexões da interface para o login do usuário.
    dlg_search: SentinelUpscalingDialogSearch
        É uma referencia a UI importada do plugin, ela contem todos os widgets e conexões da interface para a busca de imagens.
    """

    def __init__(self, iface):
        """ 
        Construtor da Classe,  sendo criada automaticamente pelo Plugin Builder.

        Parameters
        ----------
        iface: QProject
            É uma variavel de referencia a interface do QGIS.

        """
        
        self.iface = iface
        self.setgns = QSettings()
        self.plugin_dir = os.path.dirname(__file__)

        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SentinelUpscaling_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr(u'&Sentinel Upscaling')

        self.first_start = None

    def tr(self, message):
        """ 
        Função criada automaticamente pelo Plugin Builder, cria uma referencia para a aplicação central do QGIS para o plugin

        Parameters
        ----------
        message: str
            É a messagem inicial do plugin.

        Returns
        -------
        QCoreApplication
            retorna o menu aonde o plugin foi inserido
        """
        return QCoreApplication.translate('SentinelUpscaling', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """ 
        Adiciona ações ao atributo action do plugin, sendo criada automaticamente pelo Plugin Builder.

        Parameters
        ----------
        icon_path: str
            Caminho para o icone do plugin.
        text: str
            Texto com as informações da ação.
        callback: function
            Função inserida na conexão com a ação inserida
        enabled_flag: bool
            Variável criada pelo Plugin Builder, habilita ou não as flags da ação.
        add_to_menu: bool
            Variável criada pelo Plugin Builder, habilita ou não a adição da ação no menu.
        add_to_toolbar: bool
            Variável criada pelo Plugin Builder, habilita ou não a adição da ação no toolbar.
        status_tip: str
            Variável criada pelo Plugin Builder.
        whats_this: str
            Variável criada pelo Plugin Builder.
        parent: QAction
            Variável criada pelo Plugin Builder, sendo referencia ao parente dessa ação, se houver.

        Returns
        -------
        Action
            É a ação criada na função
        """
        
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action
        
    def initGui(self):
        """ 
        Faz a chamada das funções para inicializar e adicionar o plugin no QGIS, sendo criada automaticamente pelo Plugin Builder. 
        """

        icon_path = ':/plugins/sentinel_upscaling/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Download de Imagens Sentinel'),
            callback=self.run,
            parent=self.iface.mainWindow())

        self.first_start = True


    def unload(self):
        """ 
        É o Destrutor da classe. Remove todas as ações criadas na inicialização do plugin, sendo criada automaticamente pelo Plugin Builder.
        """

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Sentinel Upscaling'),
                action)
            self.iface.removeToolBarIcon(action)

    def formaImage(self, bytes):
        """ 
        Cria a imagem a partir dos bytes dela e insere em um widget PixMap, para ser inserido na coluna da tabela.

        Parameters
        ----------
        bytes: list(str)
            Bytes da imagem preview baixada

        Returns
        -------
        QLabel
            É um widget com a imagem criada
        """

        # cria a label para conter a imagem
        labels = QLabel(self.dlg_search)
        labels.setText("")
        labels.setScaledContents(True)

        # carrega os bytes e forma uma imagem
        pixmap = QPixmap()
        pixmap.loadFromData(bytes, "jpg")
        
        labels.setPixmap(pixmap)
        
        return labels

    def busca_completa(self, exception, result=None):
        """ 
        Função chamada após realizar a busca e inserção dos produtos na tabela.

        Parameters
        ----------
        exception: Exception
            Variável da exceção ocorrida durante a função de busca, caso ocorreu
        result: dict
            Dicionário com todas as informações dos produtos buscados
        """

        # se a busca terminou com sucesso, vai ter um resultado
        if result:

            # atualiza a lista de arquivos e de nomes de produtos.
            self.url_nome = result[0]
            self.lista_down = result[1]
            i = 0

            # para cada preview do produto baixado, gera a imagem dele e insere na tabela.
            for imgs in result[2]:
                
                item = self.formaImage(imgs)
                self.dlg_search.tabela.setCellWidget(i, 1, item)
                i = i + 1

    def busca(self):
        """ 
        Função para realizar a busca dos produtos a partir da data e porcentagem de nuvem que o usuário inseriu
        """

        # inicializa as listas
        self.lista_down = []
        self.url_nome = []

        # chama a api para buscar os produtos a partir do dia, porcentagem de nuvem, area do poligono e da plataforma Sentinel 2.
        products = self.api.query(footprint,
                     date=(self.dlg_search.dataInicial.date().toString("yyyyMMdd"), self.dlg_search.dataFinal.date().toString("yyyyMMdd")),
                     platformname='Sentinel-2',
                     producttype='S2MSI2A',
                     cloudcoverpercentage=self.nuvens.value())

        # limpa os conteudos da tabela
        self.iid = 0
        self.dlg_search.tabela.clearContents()
        self.dlg_search.tabela.setRowCount(0)
        self.dlg_search.tabela.setSelectionBehavior(QTableView.SelectRows)

        # cria a thread para realizar a inserção dos produtos
        globals()['task1'] = QgsTask.fromFunction("Busca das Imagens", realiza_busca,
                                        on_finished=self.busca_completa, produto=products, sess=self.sessao, tabela=self.dlg_search.tabela, flags=QgsTask.CanCancel)

        QgsApplication.taskManager().addTask(globals()['task1'])

    def download(self):
        """ 
        Função para realizar o download do produto escolhido pelo usuário.
        """


        index = self.dlg_search.tabela.selectionModel().selectedRows()[0].row()
        online_down_alvo = self.lista_down[index]
        self.down_alvo = self.url_nome[index]
        
        is_online = self.api.is_online(online_down_alvo)

        if is_online:
            if os.path.exists(self.down_alvo['path'] + f"/{self.down_alvo['img']}"):
                QMessageBox.warning(self.dlg_search, "Imagem ja baixada", f"A imagem escolhida já está presente no seu diretorio, se o arquivo dela está incompleto, por favor exclua-o e realize novamente o download.\nDiretorio do arquivo: {self.down_alvo['path']}/{self.down_alvo['img']}")
            else:
                globals()['task2'] = QgsTask.fromFunction("Download da Imagem " + self.img_down, faz_download,
                                        on_finished=self.completed, produto=self.down_alvo, sess=self.sessao, flags=QgsTask.CanCancel)

                QgsApplication.taskManager().addTask(globals()['task2'])
        else:
            QMessageBox.warning(self.dlg_search, "Imagem não está Online", "A imagem escolhida não está online, portanto o download dela não foi possivel")
    
    def finalizada(self, exception, result=None):
        
        self.iface.addRasterLayer(result[0][:-4] + "_up.jpeg", result[1])

    def warp_reproject(self):
        self.start = time.time()

        globals()['warps'] = QgsTask.fromFunction("Aumento da Escala da Imagem " + self.img_down, faz_upscaling,
                                        on_finished=self.finalizada, projeto=self.warps, flags=QgsTask.CanCancel)

        QgsApplication.taskManager().addTask(globals()['warps'])

    def completed(self, exception, result=None):
        
        if result['img']:

            self.warps = [result['path'] + "/" + result['img'][:-4] + '_4m.tif', result['img'], result['path'] + "/" + result['img']]
            
            self.warp_reproject()
        else:
            if exception is None:
                QgsMessageLog.logMessage(
                    'RandomTask "{name}" not successful but without '\
                    'exception (probably the task was manually '\
                    'canceled by the user)'.format(
                        name=description()),
                    MESSAGE_CATEGORY, Qgis.Warning)
            else:
                QgsMessageLog.logMessage(
                    'RandomTask "{name}" Exception: {exception}'.format(
                        name=description(),
                        exception=exception),
                    MESSAGE_CATEGORY, Qgis.Critical)
                raise exception

    def verifica_login(self):
        
        try:
            self.api = SentinelAPI(self.dlg.username.text(), self.dlg.password.text(), 'https://scihub.copernicus.eu/dhus', timeout=60)
            
            self.api.query(footprint,
                     date=('20210301', '20210401'),
                     platformname='Sentinel-2',
                     producttype='S2MSI2A',
                     cloudcoverpercentage=(0, 100))

            self.setgns.setValue("armazem/login", self.dlg.username.text())
            self.setgns.setValue("armazem/password", self.dlg.password.text())
            self.dlg.close()

            self.sessao = requests.Session()
            self.sessao.auth = (self.setgns.value("armazem/login"),self.setgns.value("armazem/password"))
            headers = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) '\
                         'AppleWebKit/537.36 (KHTML, like Gecko) '\
                         'Chrome/75.0.3770.80 Safari/537.36'}
            self.sessao.headers.update(headers)
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dlg_search)
            self.dlg_search.show()

            self.dlg_search.dataInicial.setDate(self.dlg_search.dataFinal.date().addDays(-7))
            self.nuvens = QLabeledRangeSlider(Qt.Horizontal)
            self.nuvens.setRange(0,100)
            self.nuvens.setValue((0,100))
            self.nuvens.setStyleSheet(QSS)
            self.nuvens.setEdgeLabelMode('')
            self.dlg_search.slider.layout().addWidget(self.nuvens)
        except Exception as e:
            eb = sys.exc_info()[0]
            print(str(e))
            QMessageBox.warning(self.dlg, "Erro na Autenticação", "Entre novamente com os dados")

    def muda_botao(self):

        result = re.search('Titulo: (.*)\nData:', self.dlg_search.tabela.selectionModel().selectedRows()[0].data())

        novo_nome = "Download: " + result.group(1)

        self.img_down = result.group(1)

        self.dlg_search.downButton.setText(novo_nome)
        self.dlg_search.downButton.adjustSize()

    def run(self):

        if self.first_start == True:

            self.first_start = False
            self.dlg = SentinelUpscalingDialog()
            self.dlg_search = SentinelUpscalingDialogSearch()
            
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dlg)

            if self.setgns.value("armazem/login") and self.setgns.value("armazem/password"):
                self.dlg.username.setText(self.setgns.value("armazem/login"))
                self.dlg.password.setText(self.setgns.value("armazem/password"))

            self.dlg.loginButton.clicked.connect(self.verifica_login)
            self.dlg_search.buscarButton.clicked.connect(self.busca)
            self.dlg_search.downButton.clicked.connect(self.download)
            self.dlg_search.tabela.itemSelectionChanged.connect(self.muda_botao)

        self.dlg.show()
